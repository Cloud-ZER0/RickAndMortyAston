{"version":3,"file":"static/js/598.6cc67606.chunk.js","mappings":"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","sources":["webpack://aston-app/./src/shared/components/Card/Card.module.scss?559c","shared/icons/FavrIcon.tsx","webpack://aston-app/./src/shared/components/UI/FavButton/FavButton.module.scss?f471","shared/components/UI/FavButton/FavButton.tsx","shared/hooks/useModal.ts","shared/hooks/useIsInFavorite.ts","webpack://aston-app/./src/shared/components/Modal/Modal.module.scss?3248","shared/components/Modal/Modal.tsx","shared/components/Card/Card.tsx","shared/components/Form/Options/index.ts","webpack://aston-app/./src/shared/components/Form/SignInForm/SignInForm.module.scss?d540","shared/components/Form/SignInForm/SignInForm.tsx","webpack://aston-app/./src/shared/components/UI/ErrMessage/ErrMessage.module.scss?4d8b","shared/components/UI/ErrMessage/ErrMessage.tsx","webpack://aston-app/./src/shared/components/UI/Input/Input.module.scss?942a","shared/components/UI/Input/Input.tsx","shared/firebase/hooks/useSIgnIn.tsx","shared/firebase/hooks/useSIgnUp.tsx","webpack://aston-app/./src/shared/pages/main/MainPage.module.scss?a68b","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","shared/components/LoadMoreTriger/LoadMoreTriger.tsx","../node_modules/src/useInView.tsx","webpack://aston-app/./src/shared/components/MainPageList/MainPageList.module.scss?1c13","shared/components/MainPageList/MainPageList.tsx","shared/components/ErrorBoundary/ErrorBoundary.tsx","shared/pages/main/MainPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__nHCKW\",\"head\":\"Card_head__P+48E\",\"body\":\"Card_body__Ouj+e\",\"btnWrap\":\"Card_btnWrap__dYi9S\",\"status\":\"Card_status__0HipY\",\"indicator\":\"Card_indicator__Urh8x\",\"Alive\":\"Card_Alive__096Lt\",\"Dead\":\"Card_Dead__jLnrR\",\"unknown\":\"Card_unknown__c1cTY\",\"propWrapper\":\"Card_propWrapper__7VraL\",\"propTitle\":\"Card_propTitle__cR4JB\",\"onLoading\":\"Card_onLoading__8aHTh\",\"anim\":\"Card_anim__o4ZSo\"};","import React from \"react\";\r\n\r\nexport const FavrIcon = () => {\r\n  return (\r\n    <svg\r\n      width=\"50px\"\r\n      height=\"50px\"\r\n      viewBox=\"0 0 50 50\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path d=\"M25 39.7l-.6-.5C11.5 28.7 8 25 8 19c0-5 4-9 9-9 4.1 0 6.4 2.3 8 4.1 1.6-1.8 3.9-4.1 8-4.1 5 0 9 4 9 9 0 6-3.5 9.7-16.4 20.2l-.6.5zM17 12c-3.9 0-7 3.1-7 7 0 5.1 3.2 8.5 15 18.1 11.8-9.6 15-13 15-18.1 0-3.9-3.1-7-7-7-3.5 0-5.4 2.1-6.9 3.8L25 17.1l-1.1-1.3C22.4 14.1 20.5 12 17 12z\" />\r\n    </svg>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"FavButton_btn__kajDu\",\"inFavr\":\"FavButton_inFavr__XqBeO\",\"disabled\":\"FavButton_disabled__kfwut\"};","import { FavrIcon } from \"../../../icons/FavrIcon\";\r\nimport styles from \"./FavButton.module.scss\";\r\nimport clsx from \"clsx\";\r\n\r\ninterface FavBtnProps {\r\n  onTogleFavorite: () => void;\r\n  isInFavorite: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const FavButton = ({\r\n  isInFavorite,\r\n  onTogleFavorite,\r\n  disabled,\r\n}: FavBtnProps) => {\r\n  return (\r\n    <button\r\n      onClick={onTogleFavorite}\r\n      disabled={disabled}\r\n      className={clsx(\r\n        styles.btn,\r\n        isInFavorite ? styles.inFavr : \"\",\r\n        disabled ? styles.disabled : \"\"\r\n      )}\r\n    >\r\n      <FavrIcon />\r\n    </button>\r\n  );\r\n};\r\n","import { useCallback, useState } from \"react\";\r\n\r\nconst useModal = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const onToggleModal = useCallback(() => {\r\n    setIsOpen((open) => !open);\r\n  }, []);\r\n\r\n  return { isOpen, onToggleModal };\r\n};\r\n\r\nexport default useModal;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../api/redux/store\";\r\nimport {\r\n  removeFavorite,\r\n  setFavorite,\r\n} from \"../../api/redux/thunks/favorite-thunk\";\r\nimport {\r\n  selectFavorite,\r\n  selectIsFavoriteError,\r\n  selectIsFavoriteLoading,\r\n  selectUid,\r\n} from \"../../api/redux/selectors\";\r\nimport {\r\n  onNotifyFavoriteAdded,\r\n  onNotifyFavoriteRemoved,\r\n} from \"../utils/notification\";\r\nimport useModal from \"./useModal\";\r\n\r\nconst useIsInFavorite = (cardId: number) => {\r\n  const uid = useAppSelector(selectUid);\r\n  const data = useAppSelector(selectFavorite);\r\n  const isLoading = useAppSelector(selectIsFavoriteLoading);\r\n  const isError = useAppSelector(selectIsFavoriteError);\r\n  const { isOpen, onToggleModal } = useModal();\r\n  const dispatch = useAppDispatch();\r\n  const is = useMemo(() => {\r\n    if (data && data.find((el) => el === cardId.toString())) return true;\r\n    else return false;\r\n  }, [data, cardId]);\r\n\r\n  const onTogleFavorite = useCallback(() => {\r\n    if (uid) {\r\n      if (is) {\r\n        dispatch(removeFavorite({ uid: uid, cardId: cardId }));\r\n        onNotifyFavoriteRemoved();\r\n      } else {\r\n        dispatch(setFavorite({ uid: uid, cardId: cardId }));\r\n        onNotifyFavoriteAdded();\r\n      }\r\n    } else {\r\n      onToggleModal();\r\n    }\r\n  }, [uid, dispatch, cardId, is, onToggleModal]);\r\n\r\n  return {\r\n    favorite: {\r\n      isInfavorite: is,\r\n      onTogleFavorite,\r\n      isLoading,\r\n      isError,\r\n    },\r\n    modal: {\r\n      isModalOpen: isOpen,\r\n      onToggleModal,\r\n    },\r\n  };\r\n};\r\n\r\nexport default useIsInFavorite;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"DialogOverlay\":\"Modal_DialogOverlay__lum+3\",\"overlayShow\":\"Modal_overlayShow__e7REa\",\"DialogContent\":\"Modal_DialogContent__BCppm\",\"contentShow\":\"Modal_contentShow__yTFGN\"};","import * as Dialog from \"@radix-ui/react-dialog\";\r\nimport { SignInForm } from \"../Form/SignInForm/SignInForm\";\r\nimport styles from \"./Modal.module.scss\";\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  toggleModal: () => void;\r\n}\r\n\r\nconst Modal = ({ isOpen, toggleModal }: ModalProps) => (\r\n  <Dialog.Root open={isOpen} onOpenChange={toggleModal}>\r\n    <Dialog.Portal>\r\n      <Dialog.Overlay className={styles.DialogOverlay} />\r\n      <Dialog.Content className={styles.DialogContent}>\r\n        <SignInForm toggleModal={toggleModal} />\r\n      </Dialog.Content>\r\n    </Dialog.Portal>\r\n  </Dialog.Root>\r\n);\r\n\r\nexport default Modal;\r\n","import { Link } from \"react-router-dom\";\r\nimport styles from \"./Card.module.scss\";\r\nimport clsx from \"clsx\";\r\nimport { FavButton } from \"../UI/FavButton/FavButton\";\r\nimport useIsInFavorite from \"../../hooks/useIsInFavorite\";\r\nimport Modal from \"../Modal/Modal\";\r\n\r\nexport type Status = \"Alive\" | \"Dead\" | \"unknown\";\r\nexport type Gender = \"Male\" | \"Female\" | \"Genderless\" | \"unknown\";\r\n\r\nexport interface CharecterCard {\r\n  name: string;\r\n  status: Status;\r\n  gender: Gender;\r\n  location: string;\r\n  image: string;\r\n  id: number;\r\n  episodes?: string[];\r\n}\r\n\r\nexport const Card = ({\r\n  name,\r\n  status,\r\n  gender,\r\n  location,\r\n  image,\r\n  id,\r\n}: CharecterCard) => {\r\n  const { favorite, modal } = useIsInFavorite(id);\r\n\r\n  return (\r\n    <div className={styles.card}>\r\n      <div>\r\n        <Link to={`/${id}`}>\r\n          <img src={image} alt=\"character\" />\r\n        </Link>\r\n        <div className={styles.head}>\r\n          <div className={styles.propWrapper}>\r\n            <span className={styles.propTitle}>Name:</span>\r\n            <p>{name}</p>\r\n          </div>\r\n          <div className={styles.status}>\r\n            <div className={clsx(styles.indicator, styles[status])}></div>\r\n            <p>{status}</p>\r\n          </div>\r\n        </div>\r\n        <div className={styles.body}>\r\n          <div className={styles.propWrapper}>\r\n            <span className={styles.propTitle}>Gender:</span>\r\n            <p>{gender}</p>\r\n          </div>\r\n          <div className={styles.propWrapper}>\r\n            <span className={styles.propTitle}>Location:</span>\r\n            <p>{location}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={styles.btnWrap}>\r\n        <FavButton\r\n          isInFavorite={favorite.isInfavorite}\r\n          onTogleFavorite={favorite.onTogleFavorite}\r\n        />\r\n        <Modal isOpen={modal.isModalOpen} toggleModal={modal.onToggleModal} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { RegisterOptions } from \"react-hook-form\";\r\nimport { FormFieldValues } from \"../SignUpForm/SignUpForm\";\r\n\r\nexport const EMAIL_OPTIONS: RegisterOptions<FormFieldValues, \"login\"> = {\r\n  required: { value: true, message: \"this field is required *\" },\r\n  pattern: {\r\n    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n    message: \"invalid email address *\",\r\n  },\r\n};\r\n\r\nexport const PASSWORD_OPTIONS: RegisterOptions<FormFieldValues, \"password\"> = {\r\n  required: { value: true, message: \"this filed is required *\" },\r\n  minLength: {\r\n    value: 6,\r\n    message: \"min-lenght of password is 6 charecters *\",\r\n  },\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SignInForm_form__a6eBx\",\"anim\":\"SignInForm_anim__af9Sx\",\"inputsWrap\":\"SignInForm_inputsWrap__CKy10\",\"btnWrapp\":\"SignInForm_btnWrapp__V1e3m\",\"redirect\":\"SignInForm_redirect__-zjD+\",\"loading\":\"SignInForm_loading__N6Iwc\"};","import { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport styles from \"./SignInForm.module.scss\";\r\nimport { Button } from \"../../UI/Button/Button\";\r\nimport { LogoIcon } from \"../../../icons/LogoIcon\";\r\nimport { ErrMessage } from \"../../UI/ErrMessage/ErrMessage\";\r\nimport { auth } from \"../../../firebase/firebase\";\r\nimport { useSigneIn } from \"../../../firebase/hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Input } from \"../../UI/Input/Input\";\r\nimport { EMAIL_OPTIONS, PASSWORD_OPTIONS } from \"../Options\";\r\nimport { FormFieldValues } from \"../SignUpForm/SignUpForm\";\r\nimport PropTypes from \"prop-types\";\r\n\r\ninterface SignInFormProps {\r\n  toggleModal?: () => void;\r\n}\r\n\r\nexport const SignInForm = ({ toggleModal }: SignInFormProps) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm<FormFieldValues>();\r\n\r\n  const { registerUserWithEmailAndPassword, loading, error } = useSigneIn(auth);\r\n\r\n  const onSubmit: SubmitHandler<FormFieldValues> = async (data) => {\r\n    await registerUserWithEmailAndPassword(data.login, data.password);\r\n    setValue(\"login\", \"\");\r\n    setValue(\"password\", \"\");\r\n    if (toggleModal) {\r\n      toggleModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>\r\n      <LogoIcon />\r\n      <div className={styles.inputsWrap}>\r\n        <Input\r\n          labelName=\"Email\"\r\n          errors={errors.login}\r\n          disabled={loading}\r\n          id=\"email\"\r\n          placeholder=\"Enter your email\"\r\n          register={register(\"login\", EMAIL_OPTIONS)}\r\n        />\r\n        <Input\r\n          labelName=\"Password\"\r\n          errors={errors.password}\r\n          disabled={loading}\r\n          id=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Enter your password\"\r\n          register={register(\"password\", PASSWORD_OPTIONS)}\r\n        />\r\n      </div>\r\n      <div className={styles.btnWrapp}>\r\n        <Button\r\n          className={loading ? styles.loading : \"\"}\r\n          variant=\"Primary\"\r\n          fill\r\n          type=\"submit\"\r\n        >\r\n          {\" Sign In!\"}\r\n        </Button>\r\n\r\n        <Link className={styles.redirect} to={\"/signup\"}>\r\n          Does't have an accoun yet?\r\n        </Link>\r\n      </div>\r\n      {error && <ErrMessage>{error.message}</ErrMessage>}\r\n    </form>\r\n  );\r\n};\r\n\r\nSignInForm.propTypes = {\r\n  toggleModal: PropTypes.func,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"msg\":\"ErrMessage_msg__wb0Tb\"};","import styles from \"./ErrMessage.module.scss\";\r\ninterface IErrMessageProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const ErrMessage = ({ children }: IErrMessageProps) => {\r\n  return <span className={styles.msg}>{children}</span>;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Input_input__xm9VQ\",\"inptWrap\":\"Input_inptWrap__Vx1sT\"};","import { FieldError, UseFormRegisterReturn } from \"react-hook-form\";\r\nimport { ErrMessage } from \"../ErrMessage/ErrMessage\";\r\nimport styles from \"./Input.module.scss\";\r\n\r\ninterface InputProps {\r\n  disabled: boolean;\r\n  labelName: string;\r\n  id: string;\r\n  placeholder: string;\r\n  register: UseFormRegisterReturn<\"login\" | \"password\">;\r\n  errors: FieldError | undefined;\r\n  type?: React.HTMLInputTypeAttribute;\r\n}\r\n\r\nexport const Input: React.FC<InputProps> = (props) => {\r\n  return (\r\n    <div className={styles.inptWrap}>\r\n      <label htmlFor=\"name\">{props.labelName}</label>\r\n      <input className={styles.input} {...props} {...props.register} />\r\n      {props.errors && <ErrMessage>{props.errors.message}</ErrMessage>}\r\n    </div>\r\n  );\r\n};\r\n","import { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nimport React from \"react\";\r\nimport { Auth, AuthError, signInWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nexport const useSigneIn = (auth: Auth) => {\r\n  const [error, setError] = React.useState<AuthError>();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const navigate = useNavigate();\r\n  const { state } = useLocation();\r\n\r\n  const registerUserWithEmailAndPassword = React.useCallback(\r\n    async (email: string, password: string) => {\r\n      setLoading(true);\r\n      setError(undefined);\r\n      await signInWithEmailAndPassword(auth, email, password)\r\n        .then(() => {\r\n          navigate(state ?? \"/\");\r\n        })\r\n        .catch((err) => setError(err as AuthError))\r\n        .finally(() => setLoading(false));\r\n    },\r\n    [auth, navigate, state]\r\n  );\r\n\r\n  return { registerUserWithEmailAndPassword, loading, error };\r\n};\r\n","import { useNavigate } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { Auth, createUserWithEmailAndPassword, AuthError } from \"firebase/auth\";\r\nimport { useState } from \"react\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { database } from \"../firebase\";\r\n\r\nexport const useSigneUp = (auth: Auth) => {\r\n  const [error, setError] = useState<AuthError>();\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const registerUserWithEmailAndPassword = React.useCallback(\r\n    async (email: string, password: string) => {\r\n      setLoading(true);\r\n      setError(undefined);\r\n      await createUserWithEmailAndPassword(auth, email, password)\r\n        .then(async (user) => {\r\n          await setDoc(doc(database, \"users\", user.user.uid), {\r\n            name: \"user\",\r\n            email: email,\r\n            password: password,\r\n            history: [],\r\n            favorites: [],\r\n          });\r\n          navigate(-1);\r\n        })\r\n        .catch((err) => setError(err as AuthError))\r\n        .finally(() => setLoading(false));\r\n    },\r\n    [auth, navigate]\r\n  );\r\n\r\n  return { registerUserWithEmailAndPassword, loading, error };\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"charList\":\"MainPage_charList__CUWJt\",\"title\":\"MainPage_title__Yq6-w\"};","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import React from \"react\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport interface ILoadMoreProps {\r\n  setCurrentPage: () => void;\r\n  hasNextPage: String | null | undefined;\r\n  isFetching: boolean;\r\n}\r\n\r\nexport const LoadMoreTrgigger = ({\r\n  setCurrentPage,\r\n  hasNextPage,\r\n  isFetching,\r\n}: ILoadMoreProps) => {\r\n  const { ref, inView } = useInView();\r\n\r\n  React.useEffect(() => {\r\n    if (inView && hasNextPage && !isFetching) {\r\n      setCurrentPage();\r\n    }\r\n  }, [inView, setCurrentPage, hasNextPage, isFetching]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        marginTop: \"50px\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n      }}\r\n      ref={ref}\r\n    >\r\n      {hasNextPage ? <ClipLoader color=\"#36d7b7\" /> : null}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"charList\":\"MainPageList_charList__8+Edb\",\"appearAnim\":\"MainPageList_appearAnim__fJxx-\"};","import { Card, CharecterCard } from \"../Card/Card\";\r\nimport styles from \"./MainPageList.module.scss\";\r\n\r\ninterface MainPageListProps {\r\n  data: CharecterCard[];\r\n}\r\n\r\nexport const MainPageList = ({ data }: MainPageListProps) => {\r\n  return (\r\n    <div className={styles.charList}>\r\n      {data.length && data.map((char, i) => <Card key={i} {...char} />)}\r\n    </div>\r\n  );\r\n};\r\n","import { Component, ErrorInfo } from \"react\";\r\n\r\ninterface Props {\r\n  children?: React.ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  public state: State = {\r\n    hasError: false,\r\n  };\r\n  public static getDerivedStateFromError(_: Error) {\r\n    return { hasError: true };\r\n  }\r\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    console.error(\"Uncaught error:\", error, errorInfo);\r\n  }\r\n  render() {\r\n    const { hasError } = this.state;\r\n\r\n    if (hasError) {\r\n      return (\r\n        <div>\r\n          <p>Seems like an error occured!</p>\r\n        </div>\r\n      );\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import styles from \"./MainPage.module.scss\";\r\nimport { useGetAllCharectersQuery } from \"../../../api/redux/api/card-api\";\r\nimport React from \"react\";\r\nimport { LoadMoreTrgigger } from \"../../components/LoadMoreTriger/LoadMoreTriger\";\r\nimport { Loading } from \"../../components/Loading/Loading\";\r\nimport { MainPageList } from \"../../components/MainPageList/MainPageList\";\r\nimport ErrorBoundary from \"../../components/ErrorBoundary/ErrorBoundary\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst MainPage = () => {\r\n  const [currentPage, setCurrentPage] = React.useState(1);\r\n  const { data, isLoading, isError, isFetching } =\r\n    useGetAllCharectersQuery(currentPage);\r\n\r\n  const handlePageChange = () => {\r\n    setCurrentPage((current) => current + 1);\r\n  };\r\n\r\n  if (isError) {\r\n    return <Navigate to={\"/error\"} />;\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <section className=\"section\">\r\n        <h1 className={styles.title}>The Rick and Morty</h1>\r\n        {data ? <MainPageList data={data.cards} /> : null}\r\n        <LoadMoreTrgigger\r\n          setCurrentPage={handlePageChange}\r\n          hasNextPage={data?.hasNextPage}\r\n          isFetching={isFetching}\r\n        />\r\n        <Loading isLoading={isLoading} />\r\n      </section>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"names":["FavrIcon","_jsx","width","height","viewBox","xmlns","children","d","FavButton","_ref","isInFavorite","onTogleFavorite","disabled","onClick","className","clsx","styles","useModal","isOpen","setIsOpen","useState","onToggleModal","useCallback","open","cardId","uid","useAppSelector","selectUid","data","selectFavorite","isLoading","selectIsFavoriteLoading","isError","selectIsFavoriteError","dispatch","useAppDispatch","is","useMemo","find","el","toString","removeFavorite","onNotifyFavoriteRemoved","setFavorite","onNotifyFavoriteAdded","favorite","isInfavorite","modal","isModalOpen","toggleModal","Dialog","onOpenChange","_jsxs","SignInForm","Card","name","status","gender","location","image","id","useIsInFavorite","card","Link","to","concat","src","alt","head","propWrapper","propTitle","indicator","body","btnWrap","Modal","EMAIL_OPTIONS","required","value","message","pattern","PASSWORD_OPTIONS","minLength","register","handleSubmit","setValue","formState","errors","useForm","registerUserWithEmailAndPassword","loading","error","useSigneIn","auth","onSubmit","async","login","password","LogoIcon","Input","labelName","placeholder","type","Button","variant","fill","ErrMessage","props","htmlFor","setError","React","setLoading","navigate","useNavigate","state","useLocation","email","undefined","signInWithEmailAndPassword","then","catch","err","finally","useSigneUp","createUserWithEmailAndPassword","setDoc","doc","database","user","history","favorites","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","get","observe","element","callback","arguments","length","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","LoadMoreTrgigger","setCurrentPage","hasNextPage","isFetching","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","setState","current","entryTarget","previousEntryTarget","result","useInView","style","marginTop","display","justifyContent","ClipLoader","color","MainPageList","char","i","ErrorBoundary","Component","constructor","hasError","getDerivedStateFromError","_","componentDidCatch","errorInfo","console","render","this","MainPage","currentPage","useGetAllCharectersQuery","Navigate","cards","handlePageChange","Loading"],"sourceRoot":""}